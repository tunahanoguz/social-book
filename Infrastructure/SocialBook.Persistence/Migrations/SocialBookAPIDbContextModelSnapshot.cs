// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SocialBook.Persistence.Contexts;

#nullable disable

namespace SocialBook.Persistence.Migrations
{
    [DbContext(typeof(SocialBookAPIDbContext))]
    partial class SocialBookAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryOfBirth")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsAllowedRecommendation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedReview")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedSubscription")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2823add5-60f3-4272-9ec1-087d69cca72c"),
                            CountryOfBirth = "United Kingdom",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(687),
                            CreatorUserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            DateOfBirth = new DateTime(1812, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Charles",
                            IsAllowedRecommendation = false,
                            IsAllowedReview = false,
                            IsAllowedSubscription = false,
                            LastName = "Dickens",
                            MetaDescription = "Meta description for Charles Dickens",
                            MetaKeywords = "charles dickens, charles dickens author, charles dickens books",
                            MetaTitle = "Charles Dickens",
                            Slug = "charles-dickens",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(687)
                        },
                        new
                        {
                            Id = new Guid("6729df32-c197-4b42-8b58-d88e1c202346"),
                            CountryOfBirth = "Russia",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(690),
                            CreatorUserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            DateOfBirth = new DateTime(1799, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alexander",
                            IsAllowedRecommendation = false,
                            IsAllowedReview = false,
                            IsAllowedSubscription = false,
                            LastName = "Pushkin",
                            MetaDescription = "Meta description for Alexander Pushkin",
                            MetaKeywords = "alexander pushkin, alexander pushkin author, alexander pushkin books",
                            MetaTitle = "Alexander Pushkin",
                            Slug = "alexander-pushkin",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(691)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("AuthorGenres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c3cf4f4-66d8-4434-8793-754353a00253"),
                            AuthorId = new Guid("2823add5-60f3-4272-9ec1-087d69cca72c"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(775),
                            GenreId = new Guid("c0385818-0ea3-4e64-aede-00a6ac1d4f7a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(776)
                        },
                        new
                        {
                            Id = new Guid("08c6b198-c710-42b6-b237-9c3ed087bd3c"),
                            AuthorId = new Guid("6729df32-c197-4b42-8b58-d88e1c202346"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(779),
                            GenreId = new Guid("c0385818-0ea3-4e64-aede-00a6ac1d4f7a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(779)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<double>("FileSize")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a899c34-e51e-443d-a315-959136f3e49b"),
                            AuthorId = new Guid("2823add5-60f3-4272-9ec1-087d69cca72c"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(866),
                            FileExtension = "png",
                            FileName = "charles-dickens-1",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(866)
                        },
                        new
                        {
                            Id = new Guid("89042067-f5d1-46d8-8661-bf68435a6375"),
                            AuthorId = new Guid("2823add5-60f3-4272-9ec1-087d69cca72c"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(869),
                            FileExtension = "png",
                            FileName = "charles-dickens-2",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(870)
                        },
                        new
                        {
                            Id = new Guid("695240a8-6ce5-4971-bd84-80a545c0f800"),
                            AuthorId = new Guid("2823add5-60f3-4272-9ec1-087d69cca72c"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(872),
                            FileExtension = "png",
                            FileName = "charles-dickens-3",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(872)
                        },
                        new
                        {
                            Id = new Guid("2de516cd-8f17-4cca-a9fe-145031916122"),
                            AuthorId = new Guid("6729df32-c197-4b42-8b58-d88e1c202346"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(874),
                            FileExtension = "png",
                            FileName = "alexander-pushkin-1",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(874)
                        },
                        new
                        {
                            Id = new Guid("27e88da6-7be9-43ae-895e-b3e721c067a6"),
                            AuthorId = new Guid("6729df32-c197-4b42-8b58-d88e1c202346"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(875),
                            FileExtension = "png",
                            FileName = "alexander-pushkin-2",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(876)
                        },
                        new
                        {
                            Id = new Guid("f3141743-ca7e-42d3-a95d-d038e1c1cfe6"),
                            AuthorId = new Guid("6729df32-c197-4b42-8b58-d88e1c202346"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(877),
                            FileExtension = "png",
                            FileName = "alexander-pushkin-3",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(878)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RecipientUserId")
                        .HasColumnType("text");

                    b.Property<string>("RecommenderUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("RecipientUserId");

                    b.HasIndex("RecommenderUserId");

                    b.ToTable("AuthorRecommendations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6dafbff6-ebb1-483a-8461-8ab6e2ec78d3"),
                            AuthorId = new Guid("2823add5-60f3-4272-9ec1-087d69cca72c"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1396),
                            RecipientUserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            RecommenderUserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1397)
                        },
                        new
                        {
                            Id = new Guid("84ab9e1f-0c20-4966-96a1-0a7f22f78ac9"),
                            AuthorId = new Guid("2823add5-60f3-4272-9ec1-087d69cca72c"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1399),
                            RecipientUserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            RecommenderUserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1399)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthorReviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19b469b0-1f15-463b-a13e-8a8797131f46"),
                            AuthorId = new Guid("2823add5-60f3-4272-9ec1-087d69cca72c"),
                            Comment = "A great author.",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(962),
                            Rating = 10,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(962),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("9610f90d-7730-4960-a7bf-86676ab9976b"),
                            AuthorId = new Guid("6729df32-c197-4b42-8b58-d88e1c202346"),
                            Comment = "A great author.",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(964),
                            Rating = 10,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(964),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("be5510ac-4df2-4a67-b1c2-94cee91d4352"),
                            AuthorId = new Guid("2823add5-60f3-4272-9ec1-087d69cca72c"),
                            Comment = "A great author.",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(966),
                            Rating = 10,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(966),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("ccf45efe-6373-4a75-aa79-ac96c171d4fa"),
                            AuthorId = new Guid("6729df32-c197-4b42-8b58-d88e1c202346"),
                            Comment = "A great author.",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(968),
                            Rating = 10,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(968),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorReviewDislike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorReviewId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthorReviewDislikes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7870185d-770e-44e7-adf7-d85d414ac245"),
                            AuthorReviewId = new Guid("19b469b0-1f15-463b-a13e-8a8797131f46"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1140),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1140),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("cdd02a4a-943a-4f25-bb5e-233f25c311d5"),
                            AuthorReviewId = new Guid("9610f90d-7730-4960-a7bf-86676ab9976b"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1143),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1143),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("85da9313-f6c0-46bc-bc53-9ec04c69345a"),
                            AuthorReviewId = new Guid("be5510ac-4df2-4a67-b1c2-94cee91d4352"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1145),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1145),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("04042d77-6c7d-46d4-9b3f-0f3055aa3980"),
                            AuthorReviewId = new Guid("ccf45efe-6373-4a75-aa79-ac96c171d4fa"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1147),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1147),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("84fb6848-02e5-4dc1-b965-d9aba425faa6"),
                            AuthorReviewId = new Guid("19b469b0-1f15-463b-a13e-8a8797131f46"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1149),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1149),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("bda2a640-089c-4931-99d3-04b7c8f93e93"),
                            AuthorReviewId = new Guid("9610f90d-7730-4960-a7bf-86676ab9976b"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1151),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1151),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("8a356fd8-93c7-487b-bae5-f55600f93c77"),
                            AuthorReviewId = new Guid("be5510ac-4df2-4a67-b1c2-94cee91d4352"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1153),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1153),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("1a3176c0-af02-43c9-8fcc-7db5a7dd006e"),
                            AuthorReviewId = new Guid("ccf45efe-6373-4a75-aa79-ac96c171d4fa"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1155),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1155),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorReviewImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorReviewId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<double>("FileSize")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorReviewId");

                    b.ToTable("AuthorReviewImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("980cdeab-feb0-4745-9635-8a2de36748b4"),
                            AuthorReviewId = new Guid("19b469b0-1f15-463b-a13e-8a8797131f46"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1253),
                            FileExtension = "png",
                            FileName = "author-review-1",
                            FileSize = 32.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1253)
                        },
                        new
                        {
                            Id = new Guid("ae4dc503-35ed-4972-877c-4bcafa33c2ee"),
                            AuthorReviewId = new Guid("9610f90d-7730-4960-a7bf-86676ab9976b"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1256),
                            FileExtension = "png",
                            FileName = "author-review-2",
                            FileSize = 32.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1256)
                        },
                        new
                        {
                            Id = new Guid("ee3bf8c4-f7da-45da-a529-e143bcc50529"),
                            AuthorReviewId = new Guid("be5510ac-4df2-4a67-b1c2-94cee91d4352"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1258),
                            FileExtension = "png",
                            FileName = "author-review-3",
                            FileSize = 32.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1258)
                        },
                        new
                        {
                            Id = new Guid("72e4f5f8-34cb-4e6a-aed2-f753f761e4d2"),
                            AuthorReviewId = new Guid("ccf45efe-6373-4a75-aa79-ac96c171d4fa"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1260),
                            FileExtension = "png",
                            FileName = "author-review-4",
                            FileSize = 32.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1260)
                        },
                        new
                        {
                            Id = new Guid("9f1c778f-8c2f-414e-a34f-9ff2404e471b"),
                            AuthorReviewId = new Guid("19b469b0-1f15-463b-a13e-8a8797131f46"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1262),
                            FileExtension = "png",
                            FileName = "author-review-5",
                            FileSize = 32.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1262)
                        },
                        new
                        {
                            Id = new Guid("91dd28f8-9f44-4506-87ea-7eaf5926563b"),
                            AuthorReviewId = new Guid("9610f90d-7730-4960-a7bf-86676ab9976b"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1264),
                            FileExtension = "png",
                            FileName = "author-review-6",
                            FileSize = 32.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1264)
                        },
                        new
                        {
                            Id = new Guid("575755ba-b3c1-4d8a-a3bb-8dd31b1ef643"),
                            AuthorReviewId = new Guid("be5510ac-4df2-4a67-b1c2-94cee91d4352"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1266),
                            FileExtension = "png",
                            FileName = "author-review-7",
                            FileSize = 32.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1266)
                        },
                        new
                        {
                            Id = new Guid("c8fa489a-8de5-47ec-a8a8-aab76adb03b4"),
                            AuthorReviewId = new Guid("ccf45efe-6373-4a75-aa79-ac96c171d4fa"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1268),
                            FileExtension = "png",
                            FileName = "author-review-8",
                            FileSize = 32.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1268)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorReviewLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorReviewId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthorReviewLikes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c715b96-0f12-4646-9cb9-b8ee50aa39f3"),
                            AuthorReviewId = new Guid("19b469b0-1f15-463b-a13e-8a8797131f46"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1046),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1046),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("653f43f7-65e6-4955-9ca7-8ed441d83878"),
                            AuthorReviewId = new Guid("9610f90d-7730-4960-a7bf-86676ab9976b"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1048),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1048),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("6b1b7e40-163b-4e58-b570-1ad170e1373c"),
                            AuthorReviewId = new Guid("be5510ac-4df2-4a67-b1c2-94cee91d4352"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1050),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1050),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("60670cd3-859e-4c71-857c-f144265f984d"),
                            AuthorReviewId = new Guid("ccf45efe-6373-4a75-aa79-ac96c171d4fa"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1052),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1052),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("90bf2914-bb18-4be9-9350-cf5f8d226da1"),
                            AuthorReviewId = new Guid("19b469b0-1f15-463b-a13e-8a8797131f46"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1054),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1054),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("5e6b7a54-eafd-41af-9ea7-38d5960f879c"),
                            AuthorReviewId = new Guid("9610f90d-7730-4960-a7bf-86676ab9976b"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1056),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1056),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("ed5cab18-12cd-4ae8-a330-ec193e162492"),
                            AuthorReviewId = new Guid("be5510ac-4df2-4a67-b1c2-94cee91d4352"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1057),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1058),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("69874936-13ff-4faf-8e04-c57be9dfbdf1"),
                            AuthorReviewId = new Guid("ccf45efe-6373-4a75-aa79-ac96c171d4fa"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1059),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1060),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthorSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cccdd851-d524-421d-9fee-35a62de5edd5"),
                            AuthorId = new Guid("2823add5-60f3-4272-9ec1-087d69cca72c"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1488),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1489),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("dbbbbba3-4694-48c3-8717-a2b564615278"),
                            AuthorId = new Guid("6729df32-c197-4b42-8b58-d88e1c202346"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1491),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1491),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("4373c365-2753-4dbc-a143-49722b87525b"),
                            AuthorId = new Guid("2823add5-60f3-4272-9ec1-087d69cca72c"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1493),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1493),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("665ec0ee-a754-4731-8f75-f82803663730"),
                            AuthorId = new Guid("6729df32-c197-4b42-8b58-d88e1c202346"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1495),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1495),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatorUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsAllowedRecommendation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedReview")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedSubscription")
                        .HasColumnType("boolean");

                    b.Property<string>("Isbn")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer");

                    b.Property<int>("PublishedYear")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3729783e-35d2-4860-9f4c-94220e96b158"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorUserId = "6b695933-0170-4908-a56c-25d5e5c2d005",
                            Description = "An awesome book",
                            IsAllowedRecommendation = true,
                            IsAllowedReview = true,
                            IsAllowedSubscription = true,
                            Isbn = "9780141439600",
                            Language = "English",
                            MetaDescription = "An awesome book",
                            MetaKeywords = "a tale of two cities, charles dickens a tale of two cities",
                            MetaTitle = "A Tale of Two Cities",
                            Name = "A Tale of Two Cities",
                            PageCount = 489,
                            PublishedYear = 1859,
                            Slug = "a-tale-of-two-cities",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5315b270-7da8-4e78-b3f6-ce402dbe7ac2"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorUserId = "6b695933-0170-4908-a56c-25d5e5c2d005",
                            Description = "An awesome book",
                            IsAllowedRecommendation = true,
                            IsAllowedReview = true,
                            IsAllowedSubscription = true,
                            Isbn = "9780192833594",
                            Language = "English",
                            MetaDescription = "An awesome book",
                            MetaKeywords = "great expectations, charles dickens great expectations",
                            MetaTitle = "Great Expectations",
                            Name = "Great Expectations",
                            PageCount = 544,
                            PublishedYear = 1860,
                            Slug = "great-expectations",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("79adb4fd-b77d-4595-9227-48b9e48e7465"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorUserId = "651e4582-f6e2-46b9-a4e4-8e8064e31ba3",
                            Description = "An awesome book",
                            IsAllowedRecommendation = true,
                            IsAllowedReview = true,
                            IsAllowedSubscription = true,
                            Isbn = "9781843911548",
                            Language = "Russian",
                            MetaDescription = "An awesome book",
                            MetaKeywords = "the captains daughter, charles dickens the captains daughter",
                            MetaTitle = "The Captain's Daughter",
                            Name = "The Captain's Daughter",
                            PageCount = 124,
                            PublishedYear = 1836,
                            Slug = "the-captains-daughter",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9c8cb817-4155-48a1-8124-30a989af0d40"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1581),
                            CreatorUserId = "651e4582-f6e2-46b9-a4e4-8e8064e31ba3",
                            Description = "An awesome book",
                            IsAllowedRecommendation = true,
                            IsAllowedReview = true,
                            IsAllowedSubscription = true,
                            Isbn = "9780140448108",
                            Language = "Russian",
                            MetaDescription = "An awesome book",
                            MetaKeywords = "eugene onegin, charles dickens eugene onegin",
                            MetaTitle = "Eugene Onegin",
                            Name = "Eugene Onegin",
                            PageCount = 240,
                            PublishedYear = 1825,
                            Slug = "eugene-onegin",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1581)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99de9db8-1832-4662-8916-1ebdf6b0c20b"),
                            BookId = new Guid("3729783e-35d2-4860-9f4c-94220e96b158"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1650),
                            GenreId = new Guid("c0385818-0ea3-4e64-aede-00a6ac1d4f7a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1650)
                        },
                        new
                        {
                            Id = new Guid("8341330c-71ec-4952-ae01-1450e312382d"),
                            BookId = new Guid("5315b270-7da8-4e78-b3f6-ce402dbe7ac2"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1653),
                            GenreId = new Guid("c0385818-0ea3-4e64-aede-00a6ac1d4f7a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1654)
                        },
                        new
                        {
                            Id = new Guid("7fa98cfc-5d30-45dc-ad9c-d87cd3e7e938"),
                            BookId = new Guid("79adb4fd-b77d-4595-9227-48b9e48e7465"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1656),
                            GenreId = new Guid("c0385818-0ea3-4e64-aede-00a6ac1d4f7a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1656)
                        },
                        new
                        {
                            Id = new Guid("85af484f-4e5d-42c1-9f3d-9eb2439b7f07"),
                            BookId = new Guid("9c8cb817-4155-48a1-8124-30a989af0d40"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1658),
                            GenreId = new Guid("c0385818-0ea3-4e64-aede-00a6ac1d4f7a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1659)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<double>("FileSize")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1aea6cf4-e595-4b65-bd75-070a6ab52de0"),
                            BookId = new Guid("3729783e-35d2-4860-9f4c-94220e96b158"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1735),
                            FileExtension = "png",
                            FileName = "book-image-1",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1735)
                        },
                        new
                        {
                            Id = new Guid("804c8556-21c5-4289-ac1d-f37e4fdd8a48"),
                            BookId = new Guid("3729783e-35d2-4860-9f4c-94220e96b158"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1737),
                            FileExtension = "png",
                            FileName = "book-image-2",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1738)
                        },
                        new
                        {
                            Id = new Guid("7efc6b63-532e-4624-a700-19c2a37bec9e"),
                            BookId = new Guid("5315b270-7da8-4e78-b3f6-ce402dbe7ac2"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1739),
                            FileExtension = "png",
                            FileName = "book-image-3",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1740)
                        },
                        new
                        {
                            Id = new Guid("0dcb946b-a1f2-446a-96d0-09ac8a63e4bf"),
                            BookId = new Guid("5315b270-7da8-4e78-b3f6-ce402dbe7ac2"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1742),
                            FileExtension = "png",
                            FileName = "book-image-4",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1742)
                        },
                        new
                        {
                            Id = new Guid("43e56053-822d-498c-8364-5798495a29b6"),
                            BookId = new Guid("79adb4fd-b77d-4595-9227-48b9e48e7465"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1744),
                            FileExtension = "png",
                            FileName = "book-image-5",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1744)
                        },
                        new
                        {
                            Id = new Guid("6b760a1c-acc7-4512-9e57-defcdddcf56a"),
                            BookId = new Guid("79adb4fd-b77d-4595-9227-48b9e48e7465"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1746),
                            FileExtension = "png",
                            FileName = "book-image-6",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1746)
                        },
                        new
                        {
                            Id = new Guid("5f5940c0-292f-439c-9491-54d9091adee2"),
                            BookId = new Guid("9c8cb817-4155-48a1-8124-30a989af0d40"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1749),
                            FileExtension = "png",
                            FileName = "book-image-7",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1749)
                        },
                        new
                        {
                            Id = new Guid("1e6e9cdd-ba66-444b-9569-3d7a88e12c4e"),
                            BookId = new Guid("9c8cb817-4155-48a1-8124-30a989af0d40"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1751),
                            FileExtension = "png",
                            FileName = "book-image-8",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1751)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RecipientUserId")
                        .HasColumnType("text");

                    b.Property<string>("RecommenderUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("RecipientUserId");

                    b.HasIndex("RecommenderUserId");

                    b.ToTable("BookRecommendations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("055ba2bd-bfb9-49cc-af9b-ef9c6127b2cc"),
                            BookId = new Guid("3729783e-35d2-4860-9f4c-94220e96b158"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2191),
                            RecipientUserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            RecommenderUserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2192)
                        },
                        new
                        {
                            Id = new Guid("9543d02d-0c6d-44cb-a841-d1b52e57fbab"),
                            BookId = new Guid("5315b270-7da8-4e78-b3f6-ce402dbe7ac2"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2194),
                            RecipientUserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            RecommenderUserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2194)
                        },
                        new
                        {
                            Id = new Guid("477a193b-2cd6-4b2b-801d-af3cb520f4b2"),
                            BookId = new Guid("79adb4fd-b77d-4595-9227-48b9e48e7465"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2196),
                            RecipientUserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            RecommenderUserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2196)
                        },
                        new
                        {
                            Id = new Guid("a8b97ae1-9c4b-4460-b058-f0af716515b6"),
                            BookId = new Guid("9c8cb817-4155-48a1-8124-30a989af0d40"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2198),
                            RecipientUserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            RecommenderUserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2198)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookReviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("383c4ba8-a1fa-4d2d-97b4-6eb255bc08f6"),
                            BookId = new Guid("3729783e-35d2-4860-9f4c-94220e96b158"),
                            Comment = "A great book.",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1887),
                            Rating = 10,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1888),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("202757b2-728d-4895-80c1-8b336e55b1d5"),
                            BookId = new Guid("5315b270-7da8-4e78-b3f6-ce402dbe7ac2"),
                            Comment = "A great book.",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1890),
                            Rating = 10,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1890),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("0d15b45f-da86-46c4-ba5b-4761ce042aa4"),
                            BookId = new Guid("79adb4fd-b77d-4595-9227-48b9e48e7465"),
                            Comment = "A great book.",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1892),
                            Rating = 10,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1892),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("bdd0da86-7a78-41a0-81b6-f2e3115310b1"),
                            BookId = new Guid("9c8cb817-4155-48a1-8124-30a989af0d40"),
                            Comment = "A great book.",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1894),
                            Rating = 10,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1894),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("d307dc6b-2b0a-4416-8b87-8fd009829f78"),
                            BookId = new Guid("3729783e-35d2-4860-9f4c-94220e96b158"),
                            Comment = "A great book.",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1896),
                            Rating = 10,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1896),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("40118223-c0b0-48c5-8de6-ef4a24b94951"),
                            BookId = new Guid("5315b270-7da8-4e78-b3f6-ce402dbe7ac2"),
                            Comment = "A great book.",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1898),
                            Rating = 10,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1898),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("61bb2e93-2110-4150-a93f-32603dd7f795"),
                            BookId = new Guid("79adb4fd-b77d-4595-9227-48b9e48e7465"),
                            Comment = "A great book.",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1900),
                            Rating = 10,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1900),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("3bfc9cb2-68a5-4bb4-b100-9264e0aa2597"),
                            BookId = new Guid("9c8cb817-4155-48a1-8124-30a989af0d40"),
                            Comment = "A great book.",
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1902),
                            Rating = 10,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1902),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookReviewDislike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookReviewId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("BookReviewDislikes");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookReviewImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookReviewId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<double>("FileSize")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookReviewId");

                    b.ToTable("BookReviewImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d589fb1c-a72f-4084-8723-6df298faecf1"),
                            BookReviewId = new Guid("383c4ba8-a1fa-4d2d-97b4-6eb255bc08f6"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2071),
                            FileExtension = "png",
                            FileName = "book-review-1",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2071)
                        },
                        new
                        {
                            Id = new Guid("cea37e4a-392e-415e-9067-69993de3e509"),
                            BookReviewId = new Guid("202757b2-728d-4895-80c1-8b336e55b1d5"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2074),
                            FileExtension = "png",
                            FileName = "book-review-2",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2074)
                        },
                        new
                        {
                            Id = new Guid("e3b0a576-a011-452c-85c9-c99ce20cc224"),
                            BookReviewId = new Guid("0d15b45f-da86-46c4-ba5b-4761ce042aa4"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2076),
                            FileExtension = "png",
                            FileName = "book-review-3",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2076)
                        },
                        new
                        {
                            Id = new Guid("ab0e24b6-9511-4605-b595-ab4f6777b377"),
                            BookReviewId = new Guid("bdd0da86-7a78-41a0-81b6-f2e3115310b1"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2078),
                            FileExtension = "png",
                            FileName = "book-review-4",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2078)
                        },
                        new
                        {
                            Id = new Guid("2e2f7388-ada3-4b1d-9aaf-623325669e59"),
                            BookReviewId = new Guid("d307dc6b-2b0a-4416-8b87-8fd009829f78"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2080),
                            FileExtension = "png",
                            FileName = "book-review-5",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2080)
                        },
                        new
                        {
                            Id = new Guid("cb5c9602-258f-4af7-9c84-d812d3513a55"),
                            BookReviewId = new Guid("40118223-c0b0-48c5-8de6-ef4a24b94951"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2082),
                            FileExtension = "png",
                            FileName = "book-review-6",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2082)
                        },
                        new
                        {
                            Id = new Guid("43addc68-2a2b-4c97-a505-2c766c513057"),
                            BookReviewId = new Guid("61bb2e93-2110-4150-a93f-32603dd7f795"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2084),
                            FileExtension = "png",
                            FileName = "book-review-7",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2084)
                        },
                        new
                        {
                            Id = new Guid("997adcd2-2a85-4588-801c-df9b67d9172c"),
                            BookReviewId = new Guid("3bfc9cb2-68a5-4bb4-b100-9264e0aa2597"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2086),
                            FileExtension = "png",
                            FileName = "book-review-8",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2086)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookReviewLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookReviewId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("BookReviewLikes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("719d667c-cb3b-4982-a01f-74796367bbeb"),
                            BookReviewId = new Guid("383c4ba8-a1fa-4d2d-97b4-6eb255bc08f6"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1986),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1987),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("d3a164c0-7e83-4543-acf1-bbf53f3f3dde"),
                            BookReviewId = new Guid("202757b2-728d-4895-80c1-8b336e55b1d5"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1989),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1989),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("f2babd38-bb12-4e6f-97ee-129d68b2221b"),
                            BookReviewId = new Guid("0d15b45f-da86-46c4-ba5b-4761ce042aa4"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1990),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1991),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("92c638da-cb40-4080-9df8-9a272258c432"),
                            BookReviewId = new Guid("bdd0da86-7a78-41a0-81b6-f2e3115310b1"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1993),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(1993),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b72f68db-eb98-44b4-ac7d-54b5451b8caf"),
                            BookId = new Guid("3729783e-35d2-4860-9f4c-94220e96b158"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2339),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2340),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("031d4502-71b5-47ec-a1c1-cb23565d5d41"),
                            BookId = new Guid("5315b270-7da8-4e78-b3f6-ce402dbe7ac2"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2342),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2342),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("47a52949-a0d3-45d0-87fc-b6478b34e011"),
                            BookId = new Guid("79adb4fd-b77d-4595-9227-48b9e48e7465"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2345),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2346),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("773d7e0f-8ec0-4dde-928e-c60376c971c6"),
                            BookId = new Guid("9c8cb817-4155-48a1-8124-30a989af0d40"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2348),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2348),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Common.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0385818-0ea3-4e64-aede-00a6ac1d4f7a"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(596),
                            MetaDescription = "Description for Novel genre",
                            MetaKeywords = "novel books, novel genre books",
                            MetaTitle = "Novel",
                            Name = "Novel",
                            Slug = "novel",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(597),
                            UserId = "6b695933-0170-4908-a56c-25d5e5c2d005"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Common.SiteSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAllowedAuthorImageUpload")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedAuthorRecommendation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedAuthorReview")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedAuthorReviewDislike")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedAuthorReviewLike")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedAuthorSubscription")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedBookImageUpload")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedBookRecommendation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedBookReview")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedBookReviewDislike")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedBookReviewLike")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedBookSubscription")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedCommunityCoverImageUpload")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedCommunityMembership")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedCommunityProfileImageUpload")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewAuthor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewBook")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewCommunity")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewCommunityModerator")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewCommunityPost")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewCommunityPostComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewGenre")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewUserFavoriteBook")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewUserRegistration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewUserWantToReadBook")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedUserCoverImageUpload")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedUserProfileImageUpload")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text");

                    b.Property<string>("PageTitleSeperator")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("SiteSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43a2057c-6ed8-4c12-ad5d-1fdd37787296"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(487),
                            IsAllowedAuthorImageUpload = true,
                            IsAllowedAuthorRecommendation = true,
                            IsAllowedAuthorReview = true,
                            IsAllowedAuthorReviewDislike = true,
                            IsAllowedAuthorReviewLike = true,
                            IsAllowedAuthorSubscription = true,
                            IsAllowedBookImageUpload = true,
                            IsAllowedBookRecommendation = true,
                            IsAllowedBookReview = true,
                            IsAllowedBookReviewDislike = true,
                            IsAllowedBookReviewLike = true,
                            IsAllowedBookSubscription = true,
                            IsAllowedCommunityCoverImageUpload = true,
                            IsAllowedCommunityMembership = true,
                            IsAllowedCommunityProfileImageUpload = true,
                            IsAllowedNewAuthor = true,
                            IsAllowedNewBook = true,
                            IsAllowedNewCommunity = true,
                            IsAllowedNewCommunityModerator = true,
                            IsAllowedNewCommunityPost = true,
                            IsAllowedNewCommunityPostComment = true,
                            IsAllowedNewGenre = true,
                            IsAllowedNewUserFavoriteBook = true,
                            IsAllowedNewUserRegistration = true,
                            IsAllowedNewUserWantToReadBook = true,
                            IsAllowedUserCoverImageUpload = true,
                            IsAllowedUserProfileImageUpload = true,
                            MetaDescription = "Meta description for social book",
                            MetaKeywords = "Meta keywords for social book",
                            PageTitleSeperator = "-",
                            Title = "Social Book",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(489)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoverImageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsAllowedMembership")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewModerator")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewPost")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowedNewPostComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileImageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CoverImageId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ProfileImageId");

                    b.ToTable("Communities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("450e3b5d-60d7-4fd8-8b28-7f5215662b01"),
                            CoverImageId = new Guid("6e05c37a-c4da-4dd7-95d8-d78fc7bdd436"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2902),
                            Description = "Community 1 description.",
                            IsAllowedMembership = true,
                            IsAllowedNewModerator = true,
                            IsAllowedNewPost = true,
                            IsAllowedNewPostComment = true,
                            IsPrivate = false,
                            Name = "Community 1",
                            OwnerUserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            ProfileImageId = new Guid("b477d72f-1f05-411c-8448-515e91dd75d8"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2903)
                        },
                        new
                        {
                            Id = new Guid("458c07f9-1061-4fb6-9a10-d90c1236079d"),
                            CoverImageId = new Guid("4b83ca08-b55c-4581-84d0-6daeeca8929a"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2906),
                            Description = "Community 2 description.",
                            IsAllowedMembership = true,
                            IsAllowedNewModerator = true,
                            IsAllowedNewPost = true,
                            IsAllowedNewPostComment = true,
                            IsPrivate = false,
                            Name = "Community 2",
                            OwnerUserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            ProfileImageId = new Guid("0e7ed195-1fb5-4a4a-94c9-36a421d52deb"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2906)
                        },
                        new
                        {
                            Id = new Guid("743b1f89-7609-4e21-9837-e470b4c12817"),
                            CoverImageId = new Guid("9b52fb7d-99e3-49a1-8681-bc43a704e17e"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2908),
                            Description = "Community 3 description.",
                            IsAllowedMembership = true,
                            IsAllowedNewModerator = true,
                            IsAllowedNewPost = true,
                            IsAllowedNewPostComment = true,
                            IsPrivate = false,
                            Name = "Community 3",
                            OwnerUserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            ProfileImageId = new Guid("1309047f-eac7-4a9c-b731-b4379e01ddbe"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2908)
                        },
                        new
                        {
                            Id = new Guid("828ec0ff-947c-4c9a-841f-b420f7e1b876"),
                            CoverImageId = new Guid("3550912e-f963-42f2-bdeb-f3f89736e67a"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2911),
                            Description = "Community 4 description.",
                            IsAllowedMembership = true,
                            IsAllowedNewModerator = true,
                            IsAllowedNewPost = true,
                            IsAllowedNewPostComment = true,
                            IsPrivate = false,
                            Name = "Community 4",
                            OwnerUserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            ProfileImageId = new Guid("669d1738-5abc-4d85-bf4d-3612975b8c75"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2911)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("GenreId");

                    b.ToTable("CommunityGenres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4cd330fc-4cb6-4f88-8d11-2fcf2ad64c51"),
                            CommunityId = new Guid("450e3b5d-60d7-4fd8-8b28-7f5215662b01"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3187),
                            GenreId = new Guid("c0385818-0ea3-4e64-aede-00a6ac1d4f7a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3188)
                        },
                        new
                        {
                            Id = new Guid("ae83a1e3-3e8e-42aa-9c9c-bfba97e831c6"),
                            CommunityId = new Guid("458c07f9-1061-4fb6-9a10-d90c1236079d"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3190),
                            GenreId = new Guid("c0385818-0ea3-4e64-aede-00a6ac1d4f7a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3190)
                        },
                        new
                        {
                            Id = new Guid("6f6f8c2e-f74d-4004-b6d1-a884244d5484"),
                            CommunityId = new Guid("743b1f89-7609-4e21-9837-e470b4c12817"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3192),
                            GenreId = new Guid("c0385818-0ea3-4e64-aede-00a6ac1d4f7a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3192)
                        },
                        new
                        {
                            Id = new Guid("37e166bd-20e4-4f13-9e1e-9d99e2f51dc5"),
                            CommunityId = new Guid("828ec0ff-947c-4c9a-841f-b420f7e1b876"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3195),
                            GenreId = new Guid("c0385818-0ea3-4e64-aede-00a6ac1d4f7a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3195)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<double>("FileSize")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("CommunityImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b477d72f-1f05-411c-8448-515e91dd75d8"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3051),
                            FileExtension = "png",
                            FileName = "community-profile-image-1",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3051)
                        },
                        new
                        {
                            Id = new Guid("0e7ed195-1fb5-4a4a-94c9-36a421d52deb"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3053),
                            FileExtension = "png",
                            FileName = "community-profile-image-2",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3053)
                        },
                        new
                        {
                            Id = new Guid("1309047f-eac7-4a9c-b731-b4379e01ddbe"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3054),
                            FileExtension = "png",
                            FileName = "community-profile-image-3",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3054)
                        },
                        new
                        {
                            Id = new Guid("669d1738-5abc-4d85-bf4d-3612975b8c75"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3056),
                            FileExtension = "png",
                            FileName = "community-profile-image-4",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3056)
                        },
                        new
                        {
                            Id = new Guid("6e05c37a-c4da-4dd7-95d8-d78fc7bdd436"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3057),
                            FileExtension = "png",
                            FileName = "community-cover-image-1",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3057)
                        },
                        new
                        {
                            Id = new Guid("4b83ca08-b55c-4581-84d0-6daeeca8929a"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3059),
                            FileExtension = "png",
                            FileName = "community-cover-image-2",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3059)
                        },
                        new
                        {
                            Id = new Guid("9b52fb7d-99e3-49a1-8681-bc43a704e17e"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3060),
                            FileExtension = "png",
                            FileName = "community-cover-image-3",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3060)
                        },
                        new
                        {
                            Id = new Guid("3550912e-f963-42f2-bdeb-f3f89736e67a"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3062),
                            FileExtension = "png",
                            FileName = "community-cover-image-4",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3062)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityMembers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7e231c7-6a28-4856-94c7-32e0f0860fe9"),
                            CommunityId = new Guid("450e3b5d-60d7-4fd8-8b28-7f5215662b01"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3302),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3302),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("ed904104-fa07-4975-82fe-57679219a269"),
                            CommunityId = new Guid("458c07f9-1061-4fb6-9a10-d90c1236079d"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3304),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3304),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("3782e0c5-0090-4484-929c-11bdf47c522e"),
                            CommunityId = new Guid("743b1f89-7609-4e21-9837-e470b4c12817"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3306),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3306),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("3d9f273c-bfaf-42f6-bd97-f2a4d9c767cf"),
                            CommunityId = new Guid("828ec0ff-947c-4c9a-841f-b420f7e1b876"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3308),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3308),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("b2b072aa-a986-4feb-854c-72aa01a4f2e0"),
                            CommunityId = new Guid("450e3b5d-60d7-4fd8-8b28-7f5215662b01"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3311),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3311),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("82fc9a4c-2ea2-47b6-97a5-a5f1220543fb"),
                            CommunityId = new Guid("458c07f9-1061-4fb6-9a10-d90c1236079d"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3313),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3313),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("caec6866-b558-44a9-aebf-70db6c30cc54"),
                            CommunityId = new Guid("743b1f89-7609-4e21-9837-e470b4c12817"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3315),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3315),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("6d4928c5-8c4d-48fa-9777-3db1b44e8e01"),
                            CommunityId = new Guid("828ec0ff-947c-4c9a-841f-b420f7e1b876"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3317),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3317),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityModerator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityModerators");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9bdb36e-39cc-4dfd-ae7f-7a9ab4cace6c"),
                            CommunityId = new Guid("450e3b5d-60d7-4fd8-8b28-7f5215662b01"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3422),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3423),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("37e00050-2b58-458c-95db-d40a43cab9b9"),
                            CommunityId = new Guid("458c07f9-1061-4fb6-9a10-d90c1236079d"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3425),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3425),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("d9247cb7-dd6d-4869-a3a5-b9fdbd093af3"),
                            CommunityId = new Guid("743b1f89-7609-4e21-9837-e470b4c12817"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3427),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3427),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("91a7a0d6-d4d6-4770-accc-1e72ab0e040f"),
                            CommunityId = new Guid("828ec0ff-947c-4c9a-841f-b420f7e1b876"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3429),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3429),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("c1463b4c-74a8-4478-94ed-3c37dec91184"),
                            CommunityId = new Guid("450e3b5d-60d7-4fd8-8b28-7f5215662b01"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3431),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3431),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("7fc3ac04-6250-4791-a6e8-7bf7ff8f572a"),
                            CommunityId = new Guid("458c07f9-1061-4fb6-9a10-d90c1236079d"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3433),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3433),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("bc5ab8e2-63e1-4123-b9c9-80b8614385ce"),
                            CommunityId = new Guid("743b1f89-7609-4e21-9837-e470b4c12817"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3435),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3435),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("8d18b441-2b18-444b-aba5-7cd51abe0ab8"),
                            CommunityId = new Guid("828ec0ff-947c-4c9a-841f-b420f7e1b876"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3437),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3437),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95fdab59-cd2e-412d-9358-31a3c2f63461"),
                            Body = "Community Post 1 body.",
                            CommunityId = new Guid("450e3b5d-60d7-4fd8-8b28-7f5215662b01"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3522),
                            Title = "Community Post 1",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3522),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("27e480c1-d49a-4e67-996c-1410ad424758"),
                            Body = "Community Post 2 body.",
                            CommunityId = new Guid("458c07f9-1061-4fb6-9a10-d90c1236079d"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3525),
                            Title = "Community Post 2",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3525),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("3e0e1e1c-fbb1-4b3b-9796-731d07995cdb"),
                            Body = "Community Post 3 body.",
                            CommunityId = new Guid("743b1f89-7609-4e21-9837-e470b4c12817"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3529),
                            Title = "Community Post 3",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3529),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("7ad1ed68-7552-40bb-b369-b54fa93131d0"),
                            Body = "Community Post 4 body.",
                            CommunityId = new Guid("828ec0ff-947c-4c9a-841f-b420f7e1b876"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3531),
                            Title = "Community Post 4",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3532),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("d3132383-9763-427a-9079-fd57b46fbf56"),
                            Body = "Community Post 5 body.",
                            CommunityId = new Guid("450e3b5d-60d7-4fd8-8b28-7f5215662b01"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3534),
                            Title = "Community Post 5",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3534),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("e0d803e5-d394-4eaf-b203-9d0a88e92619"),
                            Body = "Community Post 6 body.",
                            CommunityId = new Guid("458c07f9-1061-4fb6-9a10-d90c1236079d"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3537),
                            Title = "Community Post 6",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3537),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("0e270ba7-af85-4f84-8afb-6543009e1cc8"),
                            Body = "Community Post 7 body.",
                            CommunityId = new Guid("743b1f89-7609-4e21-9837-e470b4c12817"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3539),
                            Title = "Community Post 7",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3539),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("1806e788-ec19-42d5-9cc7-7019652bcfa1"),
                            Body = "Community Post 8 body.",
                            CommunityId = new Guid("828ec0ff-947c-4c9a-841f-b420f7e1b876"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3541),
                            Title = "Community Post 8",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3541),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityPostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<Guid>("CommunityPostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityPostId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityPostComments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8743e248-4a73-4669-84e8-c366a87e0370"),
                            Body = "Community post comment body.",
                            CommunityPostId = new Guid("95fdab59-cd2e-412d-9358-31a3c2f63461"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3716),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3717),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("190fee70-14a5-418d-8bce-3bf9c27a9d91"),
                            Body = "Community post comment body.",
                            CommunityPostId = new Guid("27e480c1-d49a-4e67-996c-1410ad424758"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3719),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3719),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("4f36a23d-df41-4519-b0b1-4312f34da98c"),
                            Body = "Community post comment body.",
                            CommunityPostId = new Guid("3e0e1e1c-fbb1-4b3b-9796-731d07995cdb"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3721),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3721),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("f47d93bf-e256-44e1-a7f1-815d9b9f78df"),
                            Body = "Community post comment body.",
                            CommunityPostId = new Guid("7ad1ed68-7552-40bb-b369-b54fa93131d0"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3723),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3723),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("565171d5-f12f-4598-9444-681076032301"),
                            Body = "Community post comment body.",
                            CommunityPostId = new Guid("d3132383-9763-427a-9079-fd57b46fbf56"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3725),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3725),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("45bb9ccc-912e-4c6d-9a99-83ec7629916c"),
                            Body = "Community post comment body.",
                            CommunityPostId = new Guid("e0d803e5-d394-4eaf-b203-9d0a88e92619"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3727),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3727),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("cb93a714-504d-40d2-816f-fd5a1a17da3c"),
                            Body = "Community post comment body.",
                            CommunityPostId = new Guid("0e270ba7-af85-4f84-8afb-6543009e1cc8"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3759),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3759),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("66e8ad10-d833-459f-818e-29fbf306a2ec"),
                            Body = "Community post comment body.",
                            CommunityPostId = new Guid("1806e788-ec19-42d5-9cc7-7019652bcfa1"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3761),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3761),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityPostImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommunityPostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<double>("FileSize")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommunityPostId");

                    b.ToTable("CommunityPostImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e1106bb-ec63-40c2-8061-961b06c30f81"),
                            CommunityPostId = new Guid("95fdab59-cd2e-412d-9358-31a3c2f63461"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3621),
                            FileExtension = "png",
                            FileName = "community-post-image-1",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3622)
                        },
                        new
                        {
                            Id = new Guid("e375c1d7-f815-4174-b269-18958b330e1d"),
                            CommunityPostId = new Guid("27e480c1-d49a-4e67-996c-1410ad424758"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3625),
                            FileExtension = "png",
                            FileName = "community-post-image-2",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3625)
                        },
                        new
                        {
                            Id = new Guid("fb9429c1-4564-410d-a450-3ea6f14639c7"),
                            CommunityPostId = new Guid("3e0e1e1c-fbb1-4b3b-9796-731d07995cdb"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3627),
                            FileExtension = "png",
                            FileName = "community-post-image-3",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3627)
                        },
                        new
                        {
                            Id = new Guid("8d07ba22-fd4f-4c17-a0c3-a100a1104b1d"),
                            CommunityPostId = new Guid("7ad1ed68-7552-40bb-b369-b54fa93131d0"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3629),
                            FileExtension = "png",
                            FileName = "community-post-image-4",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3629)
                        },
                        new
                        {
                            Id = new Guid("3ed2a280-f246-4a40-9b89-43db28812980"),
                            CommunityPostId = new Guid("d3132383-9763-427a-9079-fd57b46fbf56"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3631),
                            FileExtension = "png",
                            FileName = "community-post-image-5",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3631)
                        },
                        new
                        {
                            Id = new Guid("1d89ce26-d294-4dc5-9d9c-406039c0d949"),
                            CommunityPostId = new Guid("e0d803e5-d394-4eaf-b203-9d0a88e92619"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3633),
                            FileExtension = "png",
                            FileName = "community-post-image-6",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3634)
                        },
                        new
                        {
                            Id = new Guid("d4df3e7d-e0ff-4622-badb-1fc557cfbda3"),
                            CommunityPostId = new Guid("0e270ba7-af85-4f84-8afb-6543009e1cc8"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3636),
                            FileExtension = "png",
                            FileName = "community-post-image-7",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3636)
                        },
                        new
                        {
                            Id = new Guid("9f6b798a-e979-49f0-a2b5-09631faf1eca"),
                            CommunityPostId = new Guid("1806e788-ec19-42d5-9cc7-7019652bcfa1"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3637),
                            FileExtension = "png",
                            FileName = "community-post-image-8",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(3638)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b35b86ea-8969-4121-8789-4d48b0cbab1a",
                            ConcurrencyStamp = "c1ae90c8-1357-4a0a-9942-27324f14f026",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "c8d734dd-3d51-41fa-b109-8672a30b183e",
                            ConcurrencyStamp = "753e0857-bd0c-4f14-a4b6-6ecab7ea124d",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "fbbfdce6-caa7-49ae-9118-13dc98d99600",
                            ConcurrencyStamp = "3c78d545-2f2d-479e-8106-368167d45e15",
                            Name = "Reader",
                            NormalizedName = "READER"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("CoverImageIdId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ProfileImageIdId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CoverImageIdId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ProfileImageIdId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6b695933-0170-4908-a56c-25d5e5c2d005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "477dd350-83e4-4b2f-9b98-a5f6a6e6a220",
                            Description = "Detail description about Tunahan Oğuz",
                            Email = "tunahanog@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tunahan",
                            LastName = "Oğuz",
                            LockoutEnabled = false,
                            NormalizedEmail = "TUNAHANOG@GMAIL.COM",
                            NormalizedUserName = "TUNAHANOGUZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEEW9xjUNNi6THq3szliO/3UCneISPv1Z5q+H+olnoOz/79ofTi9BAP4UQ2Djo1RspA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "tunahanoguz"
                        },
                        new
                        {
                            Id = "651e4582-f6e2-46b9-a4e4-8e8064e31ba3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55a7ca9a-c134-49bd-b9ed-6b3c46722058",
                            Description = "Detail description about John Doe",
                            Email = "johndoe@examplemail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@EXAMPLEMAIL.COM",
                            NormalizedUserName = "JOHNDOE",
                            PasswordHash = "AQAAAAEAACcQAAAAED0uim4iXo1Eb42/0UqpWsda3p5RZibNQm1SlJBygoOiXIq562qDzZzA/Yso3p8qFQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edd6d105-d8b5-4958-83fe-57ff7977d4c0",
                            Description = "Detail description about Jane Doe",
                            Email = "janedoe@examplemail.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANEDOE@EXAMPLEMAIL.COM",
                            NormalizedUserName = "JANEDOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJCgiW0pD25e3Y/tBWpBoSq5DbEgs4nqgrQctLBmpTHIe2qOvPB1epU46b9FPZwhtw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "janedoe"
                        },
                        new
                        {
                            Id = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d2663bd-72e1-4666-bb79-107e0b329664",
                            Description = "Detail description about James Doe",
                            Email = "jamesdoe@examplemail.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMESDOE@EXAMPLEMAIL.COM",
                            NormalizedUserName = "JAMESDOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJB6hCXpBiXFGZEMU0Et5JNxuMwWVae6il9tNlOuRd/AD/1qLm3E182eL3IlpSZi9A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jamesdoe"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Users.UserFavoriteBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavoriteBooks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("908fa135-fa60-4564-83a9-ea8205249917"),
                            BookId = new Guid("3729783e-35d2-4860-9f4c-94220e96b158"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2437),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2438),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("7116d650-b4f7-4256-987f-7aa3424143f8"),
                            BookId = new Guid("5315b270-7da8-4e78-b3f6-ce402dbe7ac2"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2440),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2440),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("e2e80d2a-1975-47b5-b32d-291f3da1fbf9"),
                            BookId = new Guid("79adb4fd-b77d-4595-9227-48b9e48e7465"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2442),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2442),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("4a24b206-c433-4081-8688-6203af1b1558"),
                            BookId = new Guid("9c8cb817-4155-48a1-8124-30a989af0d40"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2444),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2444),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("3e41d3d6-da84-4a0c-90cb-1cb45216922b"),
                            BookId = new Guid("3729783e-35d2-4860-9f4c-94220e96b158"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2446),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2446),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("5ac50b3f-4a34-4d92-ae31-d0c3049aab91"),
                            BookId = new Guid("5315b270-7da8-4e78-b3f6-ce402dbe7ac2"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2448),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2448),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("697d56ff-0099-4817-97bb-7437d2840d55"),
                            BookId = new Guid("79adb4fd-b77d-4595-9227-48b9e48e7465"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2450),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2450),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("7201c06c-64a6-4ec4-bdc0-b419185885fa"),
                            BookId = new Guid("9c8cb817-4155-48a1-8124-30a989af0d40"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2453),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2453),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Users.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<double>("FileSize")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("UserImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("930e5e8f-f3d0-4b27-b357-109d610b5441"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2529),
                            FileExtension = "png",
                            FileName = "user-profile-image-1",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2529)
                        },
                        new
                        {
                            Id = new Guid("ec4eec0a-9030-493d-9e9b-5b81a557eda3"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2531),
                            FileExtension = "png",
                            FileName = "user-cover-image-1",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2531)
                        },
                        new
                        {
                            Id = new Guid("c671e4d3-4f6d-40f9-ae24-cbde71b2a965"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2533),
                            FileExtension = "png",
                            FileName = "user-profile-image-2",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2533)
                        },
                        new
                        {
                            Id = new Guid("3912062f-391e-4536-9a7a-58d3267b4c4e"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2534),
                            FileExtension = "png",
                            FileName = "user-cover-image-2",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2534)
                        },
                        new
                        {
                            Id = new Guid("712af0fc-9685-4d0d-b227-b3b4b9f18bb5"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2535),
                            FileExtension = "png",
                            FileName = "user-profile-image-3",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2536)
                        },
                        new
                        {
                            Id = new Guid("c34a9c24-9062-4a60-a368-d6c404baaf4e"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2537),
                            FileExtension = "png",
                            FileName = "user-cover-image-3",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2537)
                        },
                        new
                        {
                            Id = new Guid("677aa387-ec60-4995-9911-102d209fc199"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2538),
                            FileExtension = "png",
                            FileName = "user-profile-image-4",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2538)
                        },
                        new
                        {
                            Id = new Guid("f37b2aa7-0c53-4b45-ad57-86c968d6ca51"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2540),
                            FileExtension = "png",
                            FileName = "user-cover-image-4",
                            FileSize = 10.0,
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2540)
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Users.UserSocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SocialMediaPlatformId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SocialMediaPlatformId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSocialMedias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3993af16-4d0b-4480-97a7-2da2a24974b4"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2787),
                            SocialMediaPlatformId = new Guid("3c6fe1ee-1137-4392-862c-5f466d823b80"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2788),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            UserName = "username"
                        },
                        new
                        {
                            Id = new Guid("7003b4a6-709b-4e5c-a979-fc15e6452f65"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2790),
                            SocialMediaPlatformId = new Guid("0abccc55-768d-4e77-a25a-fe4123fb891a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2790),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            UserName = "username"
                        },
                        new
                        {
                            Id = new Guid("e0550f6f-8dd1-4b44-b498-3cce15389b65"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2792),
                            SocialMediaPlatformId = new Guid("1d99e05a-498d-4fcd-88a6-653751a7c46a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2792),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            UserName = "username"
                        },
                        new
                        {
                            Id = new Guid("1dbb185f-30bc-4296-89c6-7cddc4340129"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2794),
                            SocialMediaPlatformId = new Guid("a1601427-d8bf-4b12-9e2c-00919aeb7a76"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2794),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            UserName = "username"
                        },
                        new
                        {
                            Id = new Guid("0503a657-f0e1-4d9c-8522-62f2dab9c121"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2796),
                            SocialMediaPlatformId = new Guid("3c6fe1ee-1137-4392-862c-5f466d823b80"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2796),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            UserName = "username"
                        },
                        new
                        {
                            Id = new Guid("276a6ac7-5724-4711-916c-3b0dacda1523"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2798),
                            SocialMediaPlatformId = new Guid("0abccc55-768d-4e77-a25a-fe4123fb891a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2798),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            UserName = "username"
                        },
                        new
                        {
                            Id = new Guid("710d7b9d-34d5-4354-a392-cab90cf6ef52"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2800),
                            SocialMediaPlatformId = new Guid("1d99e05a-498d-4fcd-88a6-653751a7c46a"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2800),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            UserName = "username"
                        },
                        new
                        {
                            Id = new Guid("02f57587-4eac-4399-86cc-49c495e6ed9f"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2802),
                            SocialMediaPlatformId = new Guid("a1601427-d8bf-4b12-9e2c-00919aeb7a76"),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2802),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            UserName = "username"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Users.UserSocialMediaPlatform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UrlPostfix")
                        .HasColumnType("text");

                    b.Property<string>("UrlPrefix")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserSocialMediaPlatforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c6fe1ee-1137-4392-862c-5f466d823b80"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2708),
                            Name = "Facebook",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2708),
                            UrlPrefix = "https://www.facebook.com/"
                        },
                        new
                        {
                            Id = new Guid("0abccc55-768d-4e77-a25a-fe4123fb891a"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2710),
                            Name = "Twitter",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2710),
                            UrlPrefix = "https://twitter.com/"
                        },
                        new
                        {
                            Id = new Guid("1d99e05a-498d-4fcd-88a6-653751a7c46a"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2711),
                            Name = "Instagram",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2711),
                            UrlPrefix = "https://www.instagram.com/"
                        },
                        new
                        {
                            Id = new Guid("a1601427-d8bf-4b12-9e2c-00919aeb7a76"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2712),
                            Name = "LinkedIn",
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2713),
                            UrlPrefix = "https://www.linkedin.com/in/"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Users.UserWantToReadBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWantToReadBooks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08a144cc-33bd-402b-a432-efa4861ba8fd"),
                            BookId = new Guid("3729783e-35d2-4860-9f4c-94220e96b158"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2619),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2620),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("9f7d6cdc-9117-4bdf-8a90-3c7b373baa87"),
                            BookId = new Guid("5315b270-7da8-4e78-b3f6-ce402dbe7ac2"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2622),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2623),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("f9ea7305-8c44-44cf-a584-4fe7cab5da77"),
                            BookId = new Guid("79adb4fd-b77d-4595-9227-48b9e48e7465"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2624),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2625),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("661e4d02-226e-4ca5-bfee-869d37a387b2"),
                            BookId = new Guid("9c8cb817-4155-48a1-8124-30a989af0d40"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2627),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2627),
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f"
                        },
                        new
                        {
                            Id = new Guid("3a6e4f67-1a80-4835-8638-f7e9592c5a74"),
                            BookId = new Guid("3729783e-35d2-4860-9f4c-94220e96b158"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2629),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2629),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("43e94dba-1c13-4281-b456-ff12a156f1ce"),
                            BookId = new Guid("5315b270-7da8-4e78-b3f6-ce402dbe7ac2"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2630),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2631),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("c34d2ff1-a1a1-4268-8de8-fd84113d2b1e"),
                            BookId = new Guid("79adb4fd-b77d-4595-9227-48b9e48e7465"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2632),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2632),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        },
                        new
                        {
                            Id = new Guid("ffb40507-5cd9-4c6a-b2d4-dad8919292a4"),
                            BookId = new Guid("9c8cb817-4155-48a1-8124-30a989af0d40"),
                            CreatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2634),
                            UpdatedDate = new DateTime(2023, 4, 24, 6, 53, 19, 631, DateTimeKind.Utc).AddTicks(2634),
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1"
                        });
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "6b695933-0170-4908-a56c-25d5e5c2d005",
                            RoleId = "b35b86ea-8969-4121-8789-4d48b0cbab1a"
                        },
                        new
                        {
                            UserId = "651e4582-f6e2-46b9-a4e4-8e8064e31ba3",
                            RoleId = "c8d734dd-3d51-41fa-b109-8672a30b183e"
                        },
                        new
                        {
                            UserId = "92088e43-474e-4bd6-9dbe-cfc5293e885f",
                            RoleId = "fbbfdce6-caa7-49ae-9118-13dc98d99600"
                        },
                        new
                        {
                            UserId = "5088a487-2384-4eb6-ac10-eac5d24ee1d1",
                            RoleId = "fbbfdce6-caa7-49ae-9118-13dc98d99600"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.Author", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorGenre", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Authors.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Common.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorImage", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Authors.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorRecommendation", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Authors.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "RecipientUser")
                        .WithMany()
                        .HasForeignKey("RecipientUserId");

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "RecommenderUser")
                        .WithMany()
                        .HasForeignKey("RecommenderUserId");

                    b.Navigation("Author");

                    b.Navigation("RecipientUser");

                    b.Navigation("RecommenderUser");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorReview", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Authors.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorReviewDislike", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Authors.AuthorReview", "AuthorReview")
                        .WithMany()
                        .HasForeignKey("AuthorReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AuthorReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorReviewImage", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Authors.AuthorReview", "AuthorReview")
                        .WithMany("Images")
                        .HasForeignKey("AuthorReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorReview");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorReviewLike", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Authors.AuthorReview", "AuthorReview")
                        .WithMany()
                        .HasForeignKey("AuthorReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AuthorReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorSubscription", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Authors.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.Book", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookGenre", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Common.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookImage", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookRecommendation", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "RecipientUser")
                        .WithMany()
                        .HasForeignKey("RecipientUserId");

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "RecommenderUser")
                        .WithMany()
                        .HasForeignKey("RecommenderUserId");

                    b.Navigation("Book");

                    b.Navigation("RecipientUser");

                    b.Navigation("RecommenderUser");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookReview", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookReviewDislike", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Books.BookReview", "BookReview")
                        .WithMany()
                        .HasForeignKey("BookReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("BookReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookReviewImage", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Books.BookReview", "BookReview")
                        .WithMany("Images")
                        .HasForeignKey("BookReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookReview");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookReviewLike", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Books.BookReview", "BookReview")
                        .WithMany()
                        .HasForeignKey("BookReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("BookReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookSubscription", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Common.Genre", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.Community", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Communities.CommunityImage", "CoverImage")
                        .WithMany()
                        .HasForeignKey("CoverImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("SocialBook.Domain.Entities.Communities.CommunityImage", "ProfileImage")
                        .WithMany()
                        .HasForeignKey("ProfileImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoverImage");

                    b.Navigation("OwnerUser");

                    b.Navigation("ProfileImage");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityGenre", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Communities.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Common.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityMember", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Communities.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityModerator", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Communities.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityPost", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Communities.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityPostComment", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Communities.CommunityPost", "CommunityPost")
                        .WithMany()
                        .HasForeignKey("CommunityPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Communities.CommunityPostComment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CommunityPost");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityPostImage", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Communities.CommunityPost", "CommunityPost")
                        .WithMany("Images")
                        .HasForeignKey("CommunityPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityPost");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Identity.AppUser", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Users.UserImage", "CoverImageId")
                        .WithMany()
                        .HasForeignKey("CoverImageIdId");

                    b.HasOne("SocialBook.Domain.Entities.Users.UserImage", "ProfileImageId")
                        .WithMany()
                        .HasForeignKey("ProfileImageIdId");

                    b.Navigation("CoverImageId");

                    b.Navigation("ProfileImageId");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Users.UserFavoriteBook", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Users.UserSocialMedia", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Users.UserSocialMediaPlatform", "SocialMediaPlatform")
                        .WithMany()
                        .HasForeignKey("SocialMediaPlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("SocialMediaPlatform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Users.UserWantToReadBook", b =>
                {
                    b.HasOne("SocialBook.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialBook.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Authors.AuthorReview", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Books.BookReview", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SocialBook.Domain.Entities.Communities.CommunityPost", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
